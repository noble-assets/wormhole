// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wormhole/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryConfig struct {
}

func (m *QueryConfig) Reset()         { *m = QueryConfig{} }
func (m *QueryConfig) String() string { return proto.CompactTextString(m) }
func (*QueryConfig) ProtoMessage()    {}
func (*QueryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{0}
}
func (m *QueryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfig.Merge(m, src)
}
func (m *QueryConfig) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfig proto.InternalMessageInfo

type QueryConfigResponse struct {
	Config Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
}

func (m *QueryConfigResponse) Reset()         { *m = QueryConfigResponse{} }
func (m *QueryConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConfigResponse) ProtoMessage()    {}
func (*QueryConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{1}
}
func (m *QueryConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfigResponse.Merge(m, src)
}
func (m *QueryConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfigResponse proto.InternalMessageInfo

func (m *QueryConfigResponse) GetConfig() Config {
	if m != nil {
		return m.Config
	}
	return Config{}
}

type QueryWormchainChannel struct {
}

func (m *QueryWormchainChannel) Reset()         { *m = QueryWormchainChannel{} }
func (m *QueryWormchainChannel) String() string { return proto.CompactTextString(m) }
func (*QueryWormchainChannel) ProtoMessage()    {}
func (*QueryWormchainChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{2}
}
func (m *QueryWormchainChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWormchainChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWormchainChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWormchainChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWormchainChannel.Merge(m, src)
}
func (m *QueryWormchainChannel) XXX_Size() int {
	return m.Size()
}
func (m *QueryWormchainChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWormchainChannel.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWormchainChannel proto.InternalMessageInfo

type QueryWormchainChannelResponse struct {
	WormchainChannel string `protobuf:"bytes,1,opt,name=wormchain_channel,json=wormchainChannel,proto3" json:"wormchain_channel,omitempty"`
}

func (m *QueryWormchainChannelResponse) Reset()         { *m = QueryWormchainChannelResponse{} }
func (m *QueryWormchainChannelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWormchainChannelResponse) ProtoMessage()    {}
func (*QueryWormchainChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{3}
}
func (m *QueryWormchainChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWormchainChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWormchainChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWormchainChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWormchainChannelResponse.Merge(m, src)
}
func (m *QueryWormchainChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWormchainChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWormchainChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWormchainChannelResponse proto.InternalMessageInfo

func (m *QueryWormchainChannelResponse) GetWormchainChannel() string {
	if m != nil {
		return m.WormchainChannel
	}
	return ""
}

type QueryGuardianSets struct {
}

func (m *QueryGuardianSets) Reset()         { *m = QueryGuardianSets{} }
func (m *QueryGuardianSets) String() string { return proto.CompactTextString(m) }
func (*QueryGuardianSets) ProtoMessage()    {}
func (*QueryGuardianSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{4}
}
func (m *QueryGuardianSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGuardianSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGuardianSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGuardianSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGuardianSets.Merge(m, src)
}
func (m *QueryGuardianSets) XXX_Size() int {
	return m.Size()
}
func (m *QueryGuardianSets) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGuardianSets.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGuardianSets proto.InternalMessageInfo

type QueryGuardianSetsResponse struct {
	GuardianSets map[uint32]GuardianSet `protobuf:"bytes,1,rep,name=guardian_sets,json=guardianSets,proto3" json:"guardian_sets" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryGuardianSetsResponse) Reset()         { *m = QueryGuardianSetsResponse{} }
func (m *QueryGuardianSetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGuardianSetsResponse) ProtoMessage()    {}
func (*QueryGuardianSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{5}
}
func (m *QueryGuardianSetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGuardianSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGuardianSetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGuardianSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGuardianSetsResponse.Merge(m, src)
}
func (m *QueryGuardianSetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGuardianSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGuardianSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGuardianSetsResponse proto.InternalMessageInfo

func (m *QueryGuardianSetsResponse) GetGuardianSets() map[uint32]GuardianSet {
	if m != nil {
		return m.GuardianSets
	}
	return nil
}

type QueryGuardianSet struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGuardianSet) Reset()         { *m = QueryGuardianSet{} }
func (m *QueryGuardianSet) String() string { return proto.CompactTextString(m) }
func (*QueryGuardianSet) ProtoMessage()    {}
func (*QueryGuardianSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{6}
}
func (m *QueryGuardianSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGuardianSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGuardianSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGuardianSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGuardianSet.Merge(m, src)
}
func (m *QueryGuardianSet) XXX_Size() int {
	return m.Size()
}
func (m *QueryGuardianSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGuardianSet.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGuardianSet proto.InternalMessageInfo

func (m *QueryGuardianSet) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGuardianSetResponse struct {
	GuardianSet GuardianSet `protobuf:"bytes,1,opt,name=guardian_set,json=guardianSet,proto3" json:"guardian_set"`
}

func (m *QueryGuardianSetResponse) Reset()         { *m = QueryGuardianSetResponse{} }
func (m *QueryGuardianSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGuardianSetResponse) ProtoMessage()    {}
func (*QueryGuardianSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{7}
}
func (m *QueryGuardianSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGuardianSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGuardianSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGuardianSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGuardianSetResponse.Merge(m, src)
}
func (m *QueryGuardianSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGuardianSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGuardianSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGuardianSetResponse proto.InternalMessageInfo

func (m *QueryGuardianSetResponse) GetGuardianSet() GuardianSet {
	if m != nil {
		return m.GuardianSet
	}
	return GuardianSet{}
}

type QueryExecutedVAA struct {
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *QueryExecutedVAA) Reset()         { *m = QueryExecutedVAA{} }
func (m *QueryExecutedVAA) String() string { return proto.CompactTextString(m) }
func (*QueryExecutedVAA) ProtoMessage()    {}
func (*QueryExecutedVAA) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{8}
}
func (m *QueryExecutedVAA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutedVAA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutedVAA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutedVAA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutedVAA.Merge(m, src)
}
func (m *QueryExecutedVAA) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutedVAA) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutedVAA.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutedVAA proto.InternalMessageInfo

func (m *QueryExecutedVAA) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type QueryExecutedVAAResponse struct {
	Executed bool `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *QueryExecutedVAAResponse) Reset()         { *m = QueryExecutedVAAResponse{} }
func (m *QueryExecutedVAAResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutedVAAResponse) ProtoMessage()    {}
func (*QueryExecutedVAAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9c27f883936de0, []int{9}
}
func (m *QueryExecutedVAAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutedVAAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutedVAAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutedVAAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutedVAAResponse.Merge(m, src)
}
func (m *QueryExecutedVAAResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutedVAAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutedVAAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutedVAAResponse proto.InternalMessageInfo

func (m *QueryExecutedVAAResponse) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func init() {
	proto.RegisterType((*QueryConfig)(nil), "wormhole.v1.QueryConfig")
	proto.RegisterType((*QueryConfigResponse)(nil), "wormhole.v1.QueryConfigResponse")
	proto.RegisterType((*QueryWormchainChannel)(nil), "wormhole.v1.QueryWormchainChannel")
	proto.RegisterType((*QueryWormchainChannelResponse)(nil), "wormhole.v1.QueryWormchainChannelResponse")
	proto.RegisterType((*QueryGuardianSets)(nil), "wormhole.v1.QueryGuardianSets")
	proto.RegisterType((*QueryGuardianSetsResponse)(nil), "wormhole.v1.QueryGuardianSetsResponse")
	proto.RegisterMapType((map[uint32]GuardianSet)(nil), "wormhole.v1.QueryGuardianSetsResponse.GuardianSetsEntry")
	proto.RegisterType((*QueryGuardianSet)(nil), "wormhole.v1.QueryGuardianSet")
	proto.RegisterType((*QueryGuardianSetResponse)(nil), "wormhole.v1.QueryGuardianSetResponse")
	proto.RegisterType((*QueryExecutedVAA)(nil), "wormhole.v1.QueryExecutedVAA")
	proto.RegisterType((*QueryExecutedVAAResponse)(nil), "wormhole.v1.QueryExecutedVAAResponse")
}

func init() { proto.RegisterFile("wormhole/v1/query.proto", fileDescriptor_dd9c27f883936de0) }

var fileDescriptor_dd9c27f883936de0 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x1c, 0x6d, 0xba, 0xb6, 0xac, 0x93, 0x16, 0xda, 0xe9, 0x2e, 0x1b, 0xe3, 0x6e, 0xac, 0x11, 0xd7,
	0xb2, 0x8b, 0x09, 0xad, 0x20, 0x8b, 0x27, 0xbb, 0xcb, 0xa2, 0x07, 0x2f, 0x46, 0x50, 0x14, 0xa4,
	0xa4, 0xe9, 0x6c, 0x1a, 0x6c, 0x67, 0x62, 0x32, 0x69, 0xb7, 0xc8, 0x22, 0xe8, 0xc5, 0x93, 0x0a,
	0x7e, 0x11, 0x3f, 0xc6, 0x1e, 0x17, 0xbc, 0x08, 0x82, 0x48, 0x2b, 0xf8, 0x35, 0xa4, 0x93, 0x34,
	0x9d, 0xa6, 0x7f, 0xf4, 0x36, 0xf3, 0x7b, 0x6f, 0x7e, 0xef, 0xcd, 0x2f, 0x6f, 0x02, 0xb6, 0xfa,
	0xc4, 0xeb, 0xb6, 0x49, 0x07, 0xe9, 0xbd, 0xaa, 0xfe, 0x3a, 0x40, 0xde, 0x40, 0x73, 0x3d, 0x42,
	0x09, 0x14, 0x27, 0x80, 0xd6, 0xab, 0xca, 0x57, 0x2d, 0xe2, 0x77, 0x89, 0x1f, 0x12, 0x12, 0x4c,
	0x79, 0xc3, 0x26, 0x36, 0x61, 0x4b, 0x7d, 0xbc, 0x8a, 0xaa, 0xdb, 0x36, 0x21, 0x76, 0x07, 0xe9,
	0xa6, 0xeb, 0xe8, 0x26, 0xc6, 0x84, 0x9a, 0xd4, 0x21, 0xd8, 0x8f, 0x50, 0x99, 0x97, 0x8d, 0x95,
	0x18, 0xa6, 0xe6, 0x81, 0xf8, 0x78, 0xdc, 0xfe, 0x88, 0xe0, 0x13, 0xc7, 0x56, 0x1f, 0x82, 0x12,
	0xb7, 0x35, 0x90, 0xef, 0x12, 0xec, 0x23, 0x58, 0x05, 0x59, 0x8b, 0x55, 0x24, 0xa1, 0x2c, 0x54,
	0xc4, 0x5a, 0x49, 0xe3, 0x0c, 0x6b, 0x21, 0xf9, 0xf0, 0xd2, 0xf9, 0xcf, 0x6b, 0x29, 0x23, 0x22,
	0xaa, 0x5b, 0x60, 0x93, 0x75, 0x7a, 0x46, 0xbc, 0xae, 0xd5, 0x36, 0x1d, 0x7c, 0xd4, 0x36, 0x31,
	0x46, 0x1d, 0xf5, 0x11, 0xd8, 0x59, 0x08, 0xc4, 0x62, 0xfb, 0xa0, 0xd8, 0x9f, 0x60, 0x0d, 0x2b,
	0x04, 0x99, 0xee, 0x65, 0xa3, 0xd0, 0x4f, 0x76, 0x2b, 0x81, 0x22, 0xeb, 0xf6, 0x20, 0x30, 0xbd,
	0x96, 0x63, 0xe2, 0x27, 0x88, 0xfa, 0xea, 0x0f, 0x01, 0x5c, 0x99, 0xab, 0xc6, 0xfd, 0x2d, 0x90,
	0xb7, 0xa3, 0x7a, 0xc3, 0x47, 0xd4, 0x97, 0x84, 0xf2, 0x5a, 0x45, 0xac, 0x1d, 0xcc, 0xdc, 0x69,
	0xe9, 0x71, 0x8d, 0x2f, 0x1e, 0x63, 0xea, 0x0d, 0xa2, 0x8b, 0xe7, 0x6c, 0x0e, 0x90, 0x9f, 0x83,
	0xe2, 0x1c, 0x11, 0x16, 0xc0, 0xda, 0x2b, 0x34, 0x60, 0x77, 0xc9, 0x1b, 0xe3, 0x25, 0xd4, 0x40,
	0xa6, 0x67, 0x76, 0x02, 0x24, 0xa5, 0xd9, 0x5c, 0xa5, 0x19, 0x0f, 0x5c, 0x03, 0x23, 0xa4, 0xdd,
	0x4b, 0x1f, 0x08, 0x6a, 0x05, 0x14, 0x92, 0xee, 0xe0, 0x06, 0xc8, 0x38, 0xb8, 0x85, 0x4e, 0xa3,
	0x39, 0x85, 0x1b, 0xf5, 0x25, 0x90, 0x92, 0xcc, 0x78, 0x0a, 0x75, 0x90, 0xe3, 0xa7, 0x10, 0x7d,
	0xd8, 0xa5, 0x06, 0xa2, 0x4b, 0x8a, 0xdc, 0x25, 0x63, 0x23, 0xc7, 0xa7, 0xc8, 0x0a, 0x28, 0x6a,
	0x3d, 0xad, 0xd7, 0x43, 0x23, 0x6e, 0x40, 0xa7, 0x46, 0xdc, 0x80, 0xaa, 0x77, 0x23, 0x23, 0x1c,
	0x33, 0x36, 0x22, 0x83, 0x75, 0x14, 0x95, 0xd9, 0xa1, 0x75, 0x23, 0xde, 0xd7, 0x3e, 0x66, 0x40,
	0x86, 0x1d, 0x84, 0x27, 0x20, 0x1b, 0xc6, 0x0c, 0x4a, 0xf3, 0xdf, 0x29, 0x44, 0xe4, 0xf2, 0x32,
	0x64, 0xa2, 0xa5, 0x96, 0x3f, 0xfc, 0xf9, 0xba, 0x27, 0xbc, 0xfb, 0xf6, 0xfb, 0x4b, 0x7a, 0x13,
	0x96, 0x74, 0xfe, 0x5d, 0x84, 0xb1, 0x85, 0x9f, 0x04, 0x50, 0x48, 0x26, 0x13, 0xaa, 0xf3, 0x8d,
	0x93, 0x1c, 0x79, 0xef, 0xdf, 0x9c, 0xd8, 0xc6, 0xfe, 0xd4, 0x46, 0x19, 0x2a, 0x7a, 0xf2, 0x79,
	0xce, 0x24, 0x1f, 0xbe, 0x05, 0x39, 0x3e, 0x49, 0x50, 0x59, 0x9d, 0x53, 0x79, 0xf7, 0xff, 0x72,
	0xac, 0xde, 0x9a, 0x9a, 0xd8, 0x86, 0xf2, 0x8c, 0x89, 0x99, 0xe7, 0x01, 0xdf, 0x0b, 0x40, 0xe4,
	0xb3, 0xb6, 0xb3, 0x52, 0x40, 0xbe, 0xb9, 0x12, 0x8e, 0xe5, 0xb5, 0xa9, 0xfc, 0x0d, 0x78, 0x7d,
	0xa9, 0xbc, 0xfe, 0x86, 0x45, 0xf9, 0x8c, 0xb9, 0xe0, 0x83, 0xb6, 0xc0, 0x05, 0x07, 0x2f, 0x72,
	0xb1, 0x20, 0x7c, 0xab, 0x5c, 0x4c, 0x42, 0xd8, 0xe8, 0x99, 0xe6, 0xd8, 0x85, 0x1b, 0xd0, 0xb3,
	0xc3, 0xfb, 0xe7, 0x43, 0x45, 0xb8, 0x18, 0x2a, 0xc2, 0xaf, 0xa1, 0x22, 0x7c, 0x1e, 0x29, 0xa9,
	0x8b, 0x91, 0x92, 0xfa, 0x3e, 0x52, 0x52, 0x2f, 0x76, 0x6d, 0x87, 0xb6, 0x83, 0xa6, 0x66, 0x91,
	0xae, 0x8e, 0x49, 0xb3, 0x83, 0x6e, 0x9b, 0xfe, 0x78, 0x7c, 0xd3, 0x9e, 0x74, 0xe0, 0x22, 0xbf,
	0x99, 0x65, 0xff, 0xdd, 0x3b, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x00, 0x78, 0x4c, 0x0c,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Config returns the current module configuration.
	Config(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryConfigResponse, error)
	// WormchainChannel returns the current channel opened to Wormchain.
	WormchainChannel(ctx context.Context, in *QueryWormchainChannel, opts ...grpc.CallOption) (*QueryWormchainChannelResponse, error)
	// GuardianSets returns all guardian sets registered in the module.
	GuardianSets(ctx context.Context, in *QueryGuardianSets, opts ...grpc.CallOption) (*QueryGuardianSetsResponse, error)
	// GuardianSet returns a specific guardian set given an index.
	GuardianSet(ctx context.Context, in *QueryGuardianSet, opts ...grpc.CallOption) (*QueryGuardianSetResponse, error)
	// ExecutedVAA returns if a specific VAA has been executed on Noble.
	ExecutedVAA(ctx context.Context, in *QueryExecutedVAA, opts ...grpc.CallOption) (*QueryExecutedVAAResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Config(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryConfigResponse, error) {
	out := new(QueryConfigResponse)
	err := c.cc.Invoke(ctx, "/wormhole.v1.Query/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WormchainChannel(ctx context.Context, in *QueryWormchainChannel, opts ...grpc.CallOption) (*QueryWormchainChannelResponse, error) {
	out := new(QueryWormchainChannelResponse)
	err := c.cc.Invoke(ctx, "/wormhole.v1.Query/WormchainChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardianSets(ctx context.Context, in *QueryGuardianSets, opts ...grpc.CallOption) (*QueryGuardianSetsResponse, error) {
	out := new(QueryGuardianSetsResponse)
	err := c.cc.Invoke(ctx, "/wormhole.v1.Query/GuardianSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardianSet(ctx context.Context, in *QueryGuardianSet, opts ...grpc.CallOption) (*QueryGuardianSetResponse, error) {
	out := new(QueryGuardianSetResponse)
	err := c.cc.Invoke(ctx, "/wormhole.v1.Query/GuardianSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutedVAA(ctx context.Context, in *QueryExecutedVAA, opts ...grpc.CallOption) (*QueryExecutedVAAResponse, error) {
	out := new(QueryExecutedVAAResponse)
	err := c.cc.Invoke(ctx, "/wormhole.v1.Query/ExecutedVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Config returns the current module configuration.
	Config(context.Context, *QueryConfig) (*QueryConfigResponse, error)
	// WormchainChannel returns the current channel opened to Wormchain.
	WormchainChannel(context.Context, *QueryWormchainChannel) (*QueryWormchainChannelResponse, error)
	// GuardianSets returns all guardian sets registered in the module.
	GuardianSets(context.Context, *QueryGuardianSets) (*QueryGuardianSetsResponse, error)
	// GuardianSet returns a specific guardian set given an index.
	GuardianSet(context.Context, *QueryGuardianSet) (*QueryGuardianSetResponse, error)
	// ExecutedVAA returns if a specific VAA has been executed on Noble.
	ExecutedVAA(context.Context, *QueryExecutedVAA) (*QueryExecutedVAAResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Config(ctx context.Context, req *QueryConfig) (*QueryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedQueryServer) WormchainChannel(ctx context.Context, req *QueryWormchainChannel) (*QueryWormchainChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WormchainChannel not implemented")
}
func (*UnimplementedQueryServer) GuardianSets(ctx context.Context, req *QueryGuardianSets) (*QueryGuardianSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianSets not implemented")
}
func (*UnimplementedQueryServer) GuardianSet(ctx context.Context, req *QueryGuardianSet) (*QueryGuardianSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianSet not implemented")
}
func (*UnimplementedQueryServer) ExecutedVAA(ctx context.Context, req *QueryExecutedVAA) (*QueryExecutedVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutedVAA not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole.v1.Query/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Config(ctx, req.(*QueryConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WormchainChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWormchainChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WormchainChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole.v1.Query/WormchainChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WormchainChannel(ctx, req.(*QueryWormchainChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardianSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGuardianSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole.v1.Query/GuardianSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianSets(ctx, req.(*QueryGuardianSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardianSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGuardianSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole.v1.Query/GuardianSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianSet(ctx, req.(*QueryGuardianSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutedVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutedVAA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutedVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole.v1.Query/ExecutedVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutedVAA(ctx, req.(*QueryExecutedVAA))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wormhole.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Query_Config_Handler,
		},
		{
			MethodName: "WormchainChannel",
			Handler:    _Query_WormchainChannel_Handler,
		},
		{
			MethodName: "GuardianSets",
			Handler:    _Query_GuardianSets_Handler,
		},
		{
			MethodName: "GuardianSet",
			Handler:    _Query_GuardianSet_Handler,
		},
		{
			MethodName: "ExecutedVAA",
			Handler:    _Query_ExecutedVAA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wormhole/v1/query.proto",
}

func (m *QueryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWormchainChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWormchainChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWormchainChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWormchainChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWormchainChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWormchainChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WormchainChannel) > 0 {
		i -= len(m.WormchainChannel)
		copy(dAtA[i:], m.WormchainChannel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WormchainChannel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGuardianSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGuardianSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGuardianSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGuardianSetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGuardianSetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGuardianSetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuardianSets) > 0 {
		for k := range m.GuardianSets {
			v := m.GuardianSets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGuardianSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGuardianSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGuardianSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGuardianSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGuardianSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGuardianSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GuardianSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExecutedVAA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutedVAA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutedVAA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutedVAAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutedVAAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutedVAAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWormchainChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWormchainChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WormchainChannel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGuardianSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGuardianSetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuardianSets) > 0 {
		for k, v := range m.GuardianSets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovQuery(uint64(k)) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryGuardianSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGuardianSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GuardianSet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExecutedVAA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExecutedVAAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Executed {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWormchainChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWormchainChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWormchainChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWormchainChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWormchainChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWormchainChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WormchainChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WormchainChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGuardianSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuardianSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuardianSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGuardianSetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuardianSetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuardianSetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuardianSets == nil {
				m.GuardianSets = make(map[uint32]GuardianSet)
			}
			var mapkey uint32
			mapvalue := &GuardianSet{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuardianSet{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuardianSets[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGuardianSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuardianSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuardianSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGuardianSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuardianSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuardianSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GuardianSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutedVAA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutedVAA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutedVAA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutedVAAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutedVAAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutedVAAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
